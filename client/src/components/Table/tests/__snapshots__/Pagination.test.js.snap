// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pagination renders pagination 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Pagination
    pagination={
      Object {
        "page": 0,
        "totalPages": 5,
      }
    }
    setPage={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Button
          as="button"
          className="button"
          disabled={true}
          onClick={[Function]}
          role="button"
        >
          <Icon
            as="i"
            name="angle left"
          />
          Prev
        </Button>,
        <span
          className="label"
        >
          <React.Fragment>
            Page 
            <PageInput
              pagination={
                Object {
                  "page": 0,
                  "totalPages": 5,
                }
              }
              setPage={[Function]}
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
              storeSubscription={
                Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                }
              }
            />
             of 
            5
          </React.Fragment>
        </span>,
        <Button
          as="button"
          className="button"
          disabled={false}
          onClick={[Function]}
          role="button"
        >
          Next
          <Icon
            as="i"
            name="angle right"
          />
        </Button>,
      ],
      "className": "header",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "button",
          "children": Array [
            <Icon
              as="i"
              name="angle left"
            />,
            "Prev",
          ],
          "className": "button",
          "disabled": true,
          "onClick": [Function],
          "role": "button",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "i",
              "name": "angle left",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "Prev",
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <React.Fragment>
            Page 
            <PageInput
              pagination={
                Object {
                  "page": 0,
                  "totalPages": 5,
                }
              }
              setPage={[Function]}
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
              storeSubscription={
                Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                }
              }
            />
             of 
            5
          </React.Fragment>,
          "className": "label",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "Page ",
              <PageInput
                pagination={
                  Object {
                    "page": 0,
                    "totalPages": 5,
                  }
                }
                setPage={[Function]}
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
                storeSubscription={
                  Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": undefined,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "unsubscribe": [Function],
                  }
                }
              />,
              " of ",
              5,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Page ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "pagination": Object {
                  "page": 0,
                  "totalPages": 5,
                },
                "setPage": [Function],
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            " of ",
            5,
          ],
          "type": Symbol(react.fragment),
        },
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "button",
          "children": Array [
            "Next",
            <Icon
              as="i"
              name="angle right"
            />,
          ],
          "className": "button",
          "disabled": false,
          "onClick": [Function],
          "role": "button",
        },
        "ref": null,
        "rendered": Array [
          "Next",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "i",
              "name": "angle right",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Button
            as="button"
            className="button"
            disabled={true}
            onClick={[Function]}
            role="button"
          >
            <Icon
              as="i"
              name="angle left"
            />
            Prev
          </Button>,
          <span
            className="label"
          >
            <React.Fragment>
              Page 
              <PageInput
                pagination={
                  Object {
                    "page": 0,
                    "totalPages": 5,
                  }
                }
                setPage={[Function]}
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
                storeSubscription={
                  Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": undefined,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "unsubscribe": [Function],
                  }
                }
              />
               of 
              5
            </React.Fragment>
          </span>,
          <Button
            as="button"
            className="button"
            disabled={false}
            onClick={[Function]}
            role="button"
          >
            Next
            <Icon
              as="i"
              name="angle right"
            />
          </Button>,
        ],
        "className": "header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "children": Array [
              <Icon
                as="i"
                name="angle left"
              />,
              "Prev",
            ],
            "className": "button",
            "disabled": true,
            "onClick": [Function],
            "role": "button",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "i",
                "name": "angle left",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "Prev",
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <React.Fragment>
              Page 
              <PageInput
                pagination={
                  Object {
                    "page": 0,
                    "totalPages": 5,
                  }
                }
                setPage={[Function]}
                store={
                  Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  }
                }
                storeSubscription={
                  Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": undefined,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "unsubscribe": [Function],
                  }
                }
              />
               of 
              5
            </React.Fragment>,
            "className": "label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "Page ",
                <PageInput
                  pagination={
                    Object {
                      "page": 0,
                      "totalPages": 5,
                    }
                  }
                  setPage={[Function]}
                  store={
                    Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    }
                  }
                  storeSubscription={
                    Subscription {
                      "listeners": Object {
                        "clear": [Function],
                        "get": [Function],
                        "notify": [Function],
                        "subscribe": [Function],
                      },
                      "onStateChange": [Function],
                      "parentSub": undefined,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "unsubscribe": [Function],
                    }
                  }
                />,
                " of ",
                5,
              ],
            },
            "ref": null,
            "rendered": Array [
              "Page ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "pagination": Object {
                    "page": 0,
                    "totalPages": 5,
                  },
                  "setPage": [Function],
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": undefined,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " of ",
              5,
            ],
            "type": Symbol(react.fragment),
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "children": Array [
              "Next",
              <Icon
                as="i"
                name="angle right"
              />,
            ],
            "className": "button",
            "disabled": false,
            "onClick": [Function],
            "role": "button",
          },
          "ref": null,
          "rendered": Array [
            "Next",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "i",
                "name": "angle right",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Pagination should send an action when pressing the next button 1`] = `
Array [
  Object {
    "payload": Object {
      "page": 1,
    },
    "type": "SET_PAGE",
  },
]
`;

exports[`Pagination should send an action when pressing the previous button 1`] = `Array []`;
